{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"snippets: main function": {
		"prefix": "main",
		"body": [			
			"#include <iostream>",
			"//using namespace std;",
			"",
			"$2",
			"",
			"int main()",
			"{",
				"\t$1",
				"\t",
				"\tsystem(\"pause\");",
				"\treturn 0;",
			"}"
		],
		"description": "Code snippet for main function"
	},
	"snippets: main(int argc, char* argv[])": {
		"prefix": "main",
		"body": [
			"#include <iostream>",
			"//using namespace std;",
			"",
			"$2",
			"",
			"int main(int argc, char* argv[])",
			"{",
			"\t$1",
			"\t",
			"\tsystem(\"pause\");",
			"\treturn 0;",
			"}"
		],
		"description": "Code snippet for main function"
	},
	"Add File Header": {
		"prefix": "fileheader",
		"body": [
			"/**",
			" * @file    :${TM_FILENAME}",
			" * @brief   :$1",
			" * @version :V1.0.0",
			" * @date    :${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}",
			" */",
			""
		],
		"description": "Add file describe"
	},
	"pragma once":{
		"prefix": "pragma",
		"body": [
			"#pragma once",
			"",
			"",
		]
	},
	"snippets: Class Object": {
		"prefix": "classh",
		"body": [
			"#ifndef _${1:${TM_FILENAME_BASE/(.*)/${1:/upcase}/}}_H",
			"#define _$1_H ",
			" ",
			"class ${2:ClassName}",
			"{",
			"public:",
			"\t${2:ClassName}();",
			"\t~${2:ClassName}();",
			"\t${4:/* functions */}",
			"private:",
			"\t${3:/* data */}",
			"};",
			"#endif\t// _$1_H",
		],
		"description": "class .h"
	},
	"snippets: Function Comment": {
		"prefix": "fcom",
		"body": [
			"/**",
			"* @brief ${1:description}",
			"* @param ${3:name} ${4:usage}",
			"* @return ${2:type}",
			"*/"
		],
		"description": "Insert function comment"
	},
	"snippets: Include seperator": {
		"prefix": "isep",
		"body": [
			"/******************************************************************************/",
			"/*----------------------------------Includes----------------------------------*/",
			"/******************************************************************************/",
			"",
		],
		"description": "Insert include comment"
	},
	"snippets: Macro seperator": {
		"prefix": "msep",
		"body": [
			"/******************************************************************************/",
			"/*--------------------------------Internal Macros-----------------------------*/",
			"/******************************************************************************/",
			"",
		],
		"description": "Insert internal macro comment"
	},
	"snippets: Enum seperator": {
		"prefix": "esep",
		"body": [
			"/******************************************************************************/",
			"/*--------------------------------Enumerations--------------------------------*/",
			"/******************************************************************************/",
			"",
		],
		"description": "Insert enum comment"
	},
	"snippets: Struct seperator": {
		"prefix": "ssep",
		"body": [
			"/******************************************************************************/",
			"/*-----------------------------Data Structures--------------------------------*/",
			"/******************************************************************************/",
			"",
		],
		"description": "Insert struct comment"
	},
	"snippets: inline funtion protype seperator": {
		"prefix": "ifsep",
		"body": [
			"/******************************************************************************/",
			"/*-------------------------Inline Function Prototypes-------------------------*/",
			"/******************************************************************************/",
			"",
		],
		"description": "Insert funtion protype seperator"
	},
	"snippets: funtion protype seperator": {
		"prefix": "ifisep",
		"body": [
			"/******************************************************************************/",
			"/*-------------------------Inline Function Implementation---------------------*/",
			"/******************************************************************************/",
			"",
		],
		"description": "Insert funtion implementation seperator"
	},
	"snippets: static funtion protype seperator": {
		"prefix": "sfsep",
		"body": [
			"/******************************************************************************/",
			"/*-------------------------Static Function Prototypes-------------------------*/",
			"/******************************************************************************/",
			"",
		],
		"description": "Insert Static protype seperator"
	},
	"snippets: global funtion protype seperator": {
		"prefix": "gfsep",
		"body": [
			"/******************************************************************************/",
			"/*-------------------------Global Function Prototypes-------------------------*/",
			"/******************************************************************************/",
			"",
		],
		"description": "Insert global funtion protype seperator"
	},
	"snippets: funtion Impl seperator": {
		"prefix": "fisep",
		"body": [
			"/******************************************************************************/",
			"/*---------------------------Function Implementation--------------------------*/",
			"/******************************************************************************/",
			"",
		],
		"description": "Insert funtion implementation seperator"
	},
	"snippets: static variable seperator": {
		"prefix": "svsep",
		"body": [
			"/******************************************************************************/",
			"/*-------------------------Static Variables Definition------------------------*/",
			"/******************************************************************************/",
			"",
		],
		"description": "Insert Static Variables seperator"
	},
	"snippets: for": {
		"prefix": "for",
		"body": [
			"for (${size_t} ${i} = ${1:0}; ${i} < ${2:length}; ${i}++)",
			"{",
			"\t$3",
			"}"
		],
		"description": "Code snippet for 'for' loop"
	},
	"snippets: forr": {
		"prefix": "forr",
		"body": [
			"for (int ${i} = ${1:length} - 1; ${i} >= ${2:0}; ${i}--)",
			"{",
			"\t$3",
			"}"
		],
		"description": "Code snippet for reverse 'for' loop"
	},
	"snippets: do": {
		"prefix": "do",
		"body": [
			"do",
			"{",
			"\t$1",
			"} while($2);"
		],
		"description": "Code snippet for do...while loop"
	},
	"snippets: while": {
		"prefix": "while",
		"body": [
			"while ($1)",
			"{",
			"\t$2",
			"}"
		],
		"description": "Code snippet for while loop"
	},
	"snippets: foreach": {
		"prefix": "foreach",
		"body": [
			"for(auto ${1:var} : ${2:collection_to_loop})",
			"{",
			"\t$3",
			"}"
		],
		"description": "Code snippet for range-based for loop (c++11) statement"
	},
	"snippets: if": {
		"prefix": "if",
		"body": [
			"if ($1)",
			"{",
			"\t$2",
			"}"
		],
		"description": "Code snippet for if statement"
	},
	"snippets: else": {
		"prefix": "else",
		"body": [
			"else",
			"{",
			"\t$1",
			"}"
		],
		"description": "Code snippet for else statement"
	},
	"snippets: else if": {
		"prefix": "else if",
		"body": [
			"else if ($1)",
			"{",
			"\t$2",
			"}"
		],
		"description": "Code snippet for else-if statement"
	},
	"snippets: enum": {
		"prefix": "enum",
		"body": [
			"enum ${1:MyEnum}",
			"{",
			"\t$2",
			"};",
			"",
		],
		"description": "Code snippet for enum"
	},
	"snippets: enum class": {
		"prefix": "enum class",
		"body": [
			"enum class ${1:MyClass}",
			"{",
			"\t$2",
			"};",
			"",
		],
		"description": "Code snippet for enum class (c++11)"
	},
    "snippets: class": {
        "prefix": "class",
        "body": [
            "class ${1:ClassName}",
            "{",
            "public:",
            "\t${1:ClassName}();",
            "\t${1:ClassName}(${1:ClassName} &&) = default;",
            "\t${1:ClassName}(const ${1:ClassName} &) = default;",
            "\t${1:ClassName} &operator=(${1:ClassName} &&) = default;",
            "\t${1:ClassName} &operator=(const ${1:ClassName} &) = default;",
            "\t~${1:ClassName}();",
            "",
            "private:",
            "\t$2",
            "};",
            "",
            "${1:ClassName}::${1:ClassName}()",
            "{",
            "}",
            "",
            "${1:ClassName}::~${1:ClassName}()",
            "{",
            "}"
        ],
        "description": "Code snippet for class"
    },
    "snippets: classi": {
        "prefix": "classi",
        "body": [
            "class ${1:ClassName}",
            "{",
            "public:",
            "\t${1:ClassName}() = default;",
            "\t${1:ClassName}(${1:ClassName} &&) = default;",
            "\t${1:ClassName}(const ${1:ClassName} &) = default;",
            "\t${1:ClassName} &operator=(${1:ClassName} &&) = default;",
            "\t${1:ClassName} &operator=(const ${1:ClassName} &) = default;",
            "\t~${1:ClassName}() = default;",
            "",
            "private:",
            "\t$2",
            "};"
        ],
        "description": "Code snippet for class with inline constructor/destructor"
    },
	"snippets: Lambda Functions": {
		"prefix": "lambda",
		"body": [
			"[${1:/* capture */}](${2:/* params */})${3:/* opt */}->${4:/* return_type */}{ ${5:/* body */}; };",
			"",
		],
		"description": "Code snippet for lambda functions"
	},
	"snippets: ()?A:B Functions": {
		"prefix": "sm",
		"body": [
			"(${1:/* conditional_expression */}) ? ${2:/* true */} : ${3:/* false */};",
			"",
		],
		"description": "Code snippet for ()?A:B functions"
	},
	"snippets: interface": {
		"prefix": "interface",
		"body": [
			"__interface I${Interface}",
			"{",
			"\t$1",
			"};"
		],
		"description": "Code snippet for interface (Visual C++)"
	},
	"snippets: namespace": {
		"prefix": "namespace",
		"body": [
			"namespace ${1:MyNamespace}",
			"{",
			"\t$2",
			"}\t//namespace ${1}"
		],
		"description": "Code snippet for namespace"
	},
	"snippets: #ifdef": {
		"prefix": "#ifdef",
		"body": [
			"#ifdef ${DEBUG}",
			"$1",
			"#endif // ${DEBUG}"
		],
		"description": "Code snippet for #ifdef"
	},
	"snippets: #ifndef": {
		"prefix": "#ifndef",
		"body": [
			"#ifndef ${1:1}",
			"$2",
			"#endif // !$1"
		],
		"description": "Code snippet for #ifndef"
	},
	"snippets: #if": {
		"prefix": "#if",
		"body": [
			"#ifdef ${1:0}",
			"$2",
			"#endif // $1"
		],
		"description": "Code snippet for #if"
	},
	"snippets: struct": {
		"prefix": "struct",
		"body": [
			"struct ${1:MyStruct}",
			"{",
			"\t$2",
			"}$3;",
			"$4",
		],
		"description": "Code snippet for struct"
	},
	"snippets: typedef struct": {
		"prefix": "typedef",
		"body": [
			"typedef struct _${1:MyStruct}",
			"{",
			"\t$2",
			"}$1,*p$1;",
			"$4",
		],
		"description": "Code snippet for typedef struct"
	},
	"snippets: switch": {
		"prefix": "switch",
		"body": [
			"switch (${switch_on})",
			"{",
			"default:",
			"\tbreak;$1",
			"}"
		],
		"description": "Code snippet for switch statement"
	},
	"snippets: try": {
		"prefix": "try",
		"body": [
			"try",
			"{",
			"\t${1:/* code */}",
			"}",
			"catch (${2:const std::exception& e})",
			"{",
			"\t${3:std::cerr << e.what() << '\\n';}",
			"}"
		],
		"description": "Code snippet for try catch"
	},
	"snippets: union": {
		"prefix": "union",
		"body": [
			"union ${MyUnion}",
			"{",
			"\t$1",
			"};"
		],
		"description": "Code snippet for union"
	},
	"snippets: cout": {
		"prefix": "cout",
		"body": [
			"std::cout << \"${1:/* message */}\"$2 << std::endl;",
			""
		],
		"description": "Code snippet for printing to std::cout, provided the header is set"
	},
	"snippets: printf": {
		"prefix": "printf",
		"body": [
			"printf(\"${1:_Format}\", ${2:...});",
			""
		],
		"description": "Code snippet for printf, provided the header is set"
	},
	"snippets: printf_s": {
		"prefix": "printfs",
		"body": [
			"printf_s(\"${1:_Format}\", ${2:...});",
			""
		],
		"description": "Code snippet for printf, provided the header is set"
	},
	"snippets: #inc": {
		"prefix": "#inc",
		"body": [
			"#include \"$1\""
		],
		"description": "Code snippet for #include \" \""
	},
	"snippets: #inc<>": {
		"prefix": "#incj",
		"body": [
			"#include <$1>"
		],
		"description": "Code snippet for #include \" \""
	},
	"snippets: #def": {
		"prefix": "#def",
		"body": [
			"#define \"$1\" \"$2\" "
			],
		"description": "Code snippet for #define \" \""
	}
}