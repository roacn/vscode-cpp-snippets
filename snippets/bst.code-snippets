{
"Insert in BST": {
"prefix": "insBst",
"body": [
	"Node* insertBST(Node* root, int val)",
	"{",
	"\tif (root == NULL)",
	"\t{",
	"\t\treturn new Node(val);",
	"\t}",
	"\tif (val < root->data)",
	"\t{",
	"\t\troot->left = insertBST(root->left, val);",
	"\t}",
	"\telse",
	"\t{",
	"\t\troot->right = insertBST(root->right, val);",
	"\t}",
	"\treturn root;",
	"}"
],
"description": "Insert in BST"
},
"Delete in BST": {
"prefix": "delBst",
"body": [
	"Node *inorderSucc(Node *root)",
	"{",
	"\tNode *curr = root;",
	"\twhile (curr && curr->left != NULL)",
	"\t{",
	"\t\tcurr = curr->left;",
	"\t}",
	"\treturn curr;",
	"}",
	"Node *deleteInBST(Node *root, int key)",
	"{",
	"\tif (key < root->data)",
	"\t{",
	"\t\troot->left = deleteInBST(root->left, key);",
	"\t}",
	"\telse if (key > root->data)",
	"\t{",
	"\t\troot->right = deleteInBST(root->right, key);",
	"\t}",
	"\telse",
	"\t{",
	"\t\tif (root->left == NULL)",
	"\t\t{",
	"\t\t\tNode *temp = root->right;",
	"\t\t\tfree(root);",
	"\t\t\treturn temp;",
	"\t\t}",
	"\t\telse if (root->right == NULL)",
	"\t\t{",
	"\t\t\tNode *temp = root->left;",
	"\t\t\tfree(root);",
	"\t\t\treturn temp;",
	"\t\t}",
	"\t\tNode *temp = inorderSucc(root->right);",
	"\t\troot->data = temp->data;",
	"\t\troot->right = deleteInBST(root->right, temp->data);",
	"\t}",
	"\treturn root;",
	"}"
],
"description": "Delete in BST"
},
"Search in BST": {
"prefix": "searchBst",
"body": [
	"Node *searchInBST(Node *root, int key)",
	"{",
	"\tif (root == NULL)",
	"\t{",
	"\t\treturn NULL;",
	"\t}",
	"\tif (root->data == key)",
	"\t{",
	"\t\treturn root;",
	"\t}",
	"\tif (root->data > key)",
	"\t{",
	"\t\treturn searchInBST(root->left, key);",
	"\t}",
	"\treturn searchInBST(root->right, key);",
	"}"
],
"description": "Search in BST"
},
"Construct BST": {
"prefix": "constructBst",
"body": [
	"Node *constructBST(int preorder[], int *preorderIdx, int key, int min, int max, int n)",
	"{",
	"\tif (*preorderIdx >= n)",
	"\t{",
	"\t\treturn NULL;",
	"\t}",
	"\tNode *root = NULL;",
	"\tif (key > min && key < max)",
	"\t{",
	"\t\troot = new Node(key);",
	"\t\t*preorderIdx = *preorderIdx + 1;",
	"\t\tif (*preorderIdx < n)",
	"\t\t{",
	"\t\t\troot->left = constructBST(preorder, preorderIdx, preorder[*preorderIdx], min, key, n);",
	"\t\t}",
	"\t\tif (*preorderIdx < n)",
	"\t\t{",
	"\t\t\troot->right = constructBST(preorder, preorderIdx, preorder[*preorderIdx], key, max, n);",
	"\t\t}",
	"\t}",
	"\treturn root;",
	"}"
],
"description": "Construct BST"
},
"Check the given tree is BST or not": {
"prefix": "isBst",
"body": [
	"bool isBST(Node *root, Node *min = NULL, Node *max = NULL)",
	"{",
	"\tif (root == NULL)",
	"\t{",
	"\t\treturn true;",
	"\t}",
	"\tif (min != NULL && root->data <= min->data)",
	"\t{",
	"\t\treturn false;",
	"\t}",
	"\tif (max != NULL && root->data >= max->data)",
	"\t{",
	"\t\treturn false;",
	"\t}",
	"\tbool leftValid = isBST(root->left, min, root);",
	"\tbool rightValid = isBST(root->right, root, max);",
	"",
	"\treturn leftValid and rightValid;",
	"}"
],
"description": "Check the given tree is BST or not"
},
"Sorted array to Bst": {
"prefix": "sortArrToBst",
"body": [
	"Node *sortedArrToBST(int a[], int start, int end)",
	"{",
	"\tif (start > end)",
	"\t{",
	"\t\treturn NULL;",
	"\t}",
	"",
	"\tint mid = (start + end) / 2;",
	"\tNode *root = new Node(a[mid]);",
	"",
	"\troot->left = sortedArrToBST(a, start, mid - 1);",
	"\troot->right = sortedArrToBST(a, mid + 1, end);",
	"",
	"\treturn root;",
	"}"
],
"description": "Sorted array to Bst"
},
"Is Bst identical or nor": {
"prefix": "isIdentical",
"body": [
	"bool isIdentical(Node *root1, Node *root2)",
	"{",
	"\tif (root1 == NULL && root2 == NULL)",
	"\t{",
	"\t\treturn true;",
	"\t}",
	"\telse if (root1 == NULL || root2 == NULL)",
	"\t{",
	"\t\treturn false;",
	"\t}",
	"\telse",
	"\t{",
	"\t\tbool c1 = root1->data == root2->data;",
	"\t\tbool c2 = isIdentical(root1->left, root2->left);",
	"\t\tbool c3 = isIdentical(root1->right, root2->right);",
	"",
	"\t\tif (c1 && c2 && c3)",
	"\t\t{",
	"\t\t\treturn true;",
	"\t\t}",
	"\t\telse",
	"\t\t{",
	"\t\t\treturn false;",
	"\t\t}",
	"\t}",
	"}"
],
"description": "Is Bst identical or nor"
},
"zigzagTraversal Bst": {
"prefix": "zigzagTraversal",
"body": [
	"void zigzagTraversal(Node *root)",
	"{",
	"\tif (root == NULL)",
	"\t{",
	"\t\treturn;",
	"\t}",
	"\tstack<Node *> currLevel;",
	"\tstack<Node *> nextLevel;",
	"",
	"\tbool leftToRight = true;",
	"",
	"\tcurrLevel.push(root);",
	"\twhile (!currLevel.empty())",
	"\t{",
	"\t\tNode *temp = currLevel.top();",
	"\t\tcurrLevel.pop();",
	"",
	"\t\tif (temp)",
	"\t\t{",
	"\t\t\tcout << temp->data << \" \";",
	"\t\t\tif (leftToRight)",
	"\t\t\t{",
	"\t\t\t\tif (temp->left)",
	"\t\t\t\t{",
	"\t\t\t\t\tnextLevel.push(temp->left);",
	"\t\t\t\t}",
	"\t\t\t\tif (temp->right)",
	"\t\t\t\t{",
	"\t\t\t\t\tnextLevel.push(temp->right);",
	"\t\t\t\t}",
	"\t\t\t}",
	"\t\t\telse",
	"\t\t\t{",
	"\t\t\t\tif (temp->right)",
	"\t\t\t\t{",
	"\t\t\t\t\tnextLevel.push(temp->right);",
	"\t\t\t\t}",
	"\t\t\t\tif (temp->left)",
	"\t\t\t\t{",
	"\t\t\t\t\tnextLevel.push(temp->left);",
	"\t\t\t\t}",
	"\t\t\t}",
	"\t\t}",
	"\t\tif (currLevel.empty())",
	"\t\t{",
	"\t\t\tleftToRight = !leftToRight;",
	"\t\t\tswap(currLevel, nextLevel);",
	"\t\t}",
	"\t}",
	"}"
],
"description": "zigzagTraversal Bst"
}
}
	